name: CICD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  release:
    runs-on: windows-latest

    defaults:
      run:
        shell: pwsh

    env:
      DALAMUD_HOME: /tmp/dalamud

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.2.0
        with:
          versionSpec: '6.*'

      - name: Determine Version
        id: versioning
        uses: gittools/actions/gitversion/execute@v3.2.0

      - name: Download dalamud 
        run: |
          New-Item `
            -Path /tmp/ `
            -ItemType Directory `
            -Force `
            | Out-Null

          Invoke-RestMethod https://goatcorp.github.io/dalamud-distrib/latest.zip `
            -Outfile /tmp/dalamud.zip

          Expand-Archive /tmp/dalamud.zip `
            -DestinationPath /tmp/dalamud

      - name: Build
        run: dotnet build 
          $Env:GITHUB_WORKSPACE/SkipCutscene.sln 
          /p:Configuration=Pack
          /p:AssemblyVersion=${{ steps.versioning.outputs.AssemblySemVer }}

      - name: Publish
      #   if: ${{ github.event_name != 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        run: |
          # Fetch required metadata
          cd ${{github.workspace}}/SkipCutscene/
          $sdk = (Select-Xml `
            -Path .\SkipCutscene.csproj `
            -XPath /Project `
            ).Node.Sdk

          $manifest = [Management.Automation.OrderedHashtable](`
            Get-Content `
              ./SkipCutscene.json `
              | ConvertFrom-Json -AsHashtable)

          # Generate repository metadata
          cd ./bin/Pack/SkipCutscene
          $repoUrl = '${{ github.server_url }}/${{ github.repository }}'
          $downloadUrl = "${repoUrl}/releases/latest/download/latest.zip"

          $manifest + [ordered]@{
            InternalName = 'SkipCutscene'
            AssemblyVersion = '${{ steps.versioning.outputs.MajorMinorPatch }}'
            tags = @(
              'utility'
              'skip'
              'msq'
              'cutscene'
              'scenario'
            )
            DalamudApiLevel = ([Management.Automation.SemanticVersion]$sdk.Split('/')[-1]).Major
            ApplicableVersion = 'any'
            LastUpdate = [DateTimeOffset]::Now.ToUnixTimeSeconds()
            RepoUrl = $repoUrl
            DownloadLinkTesting = $downloadUrl
            DownloadLinkInstall = $downloadUrl
            DownloadLinkUpdate = $downloadUrl
            DownloadCount = 1
          } `
          | ConvertTo-Json -AsArray `
          > ./repo.json

          Write-Host (Invoke-RestMethod 'https://api.github.com/repos/${{ github.repository }}/releases')

          # Publish release
          $files = (Get-ChildItem .).Name
          gh release create ${{ steps.versioning.outputs.MajorMinorPatch }} @files