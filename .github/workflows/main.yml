name: CICD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  release:
    runs-on: windows-latest

    defaults:
      run:
        shell: pwsh

    env:
      DALAMUD_HOME: /tmp/dalamud

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.2.0
        with:
          versionSpec: '6.*'

      - name: Determine Version
        id: versioning
        uses: gittools/actions/gitversion/execute@v3.2.0

      - name: Download dalamud 
        run: |
          New-Item `
            -Path /tmp/ `
            -ItemType Directory `
            -Force `
            | Out-Null

          Invoke-RestMethod https://goatcorp.github.io/dalamud-distrib/latest.zip `
            -Outfile /tmp/dalamud.zip

          Expand-Archive /tmp/dalamud.zip `
            -DestinationPath /tmp/dalamud

      - name: Build
        run: dotnet build 
          $Env:GITHUB_WORKSPACE/SkipCutscene.sln 
          /p:Configuration=Pack
          /p:AssemblyVersion=${{ steps.versioning.outputs.AssemblySemVer }}

      - name: Publish
        if: ${{ github.event_name != 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        run: |
          $projectName = 'Dalamud.Plugin.SkipCutscene'

          # Fetch required metadata
          cd "${{github.workspace}}/src/$projectName/"
          $sdk = (Select-Xml `
            -Path ".\${projectName}.csproj" `
            -XPath /Project `
            ).Node.Sdk

          # Generate repository metadata
          cd "./bin/Pack/$projectName"
          $repoUrl = '${{ github.server_url }}/${{ github.repository }}'
          $downloadUrl = "${repoUrl}/releases/latest/download/latest.zip"

          $manifest = [Management.Automation.OrderedHashtable](`
            Get-Content `
              "./$projectName.json" `
              | ConvertFrom-Json -AsHashtable)

          $manifest.AssemblyVersion = '${{ steps.versioning.outputs.MajorMinorPatch }}'

          $manifest + [ordered]@{
            LastUpdate = [DateTimeOffset]::Now.ToUnixTimeSeconds()
            RepoUrl = $repoUrl
            DownloadLinkTesting = $downloadUrl
            DownloadLinkInstall = $downloadUrl
            DownloadLinkUpdate = $downloadUrl
            DownloadCount = ((Invoke-RestMethod `
              '${{ github.api_url }}/repos/${{ github.repository }}/releases'
              ).assets
              | Where-Object { $_.name -eq 'latest.zip' }
              | Measure-Object -Sum -Property download_count
              ).Sum ?? 0
          } `
          | ConvertTo-Json -AsArray `
          > ./repo.json

          # Publish release
          $files = (Get-ChildItem .).Name

          $prerelease = ('${{ steps.versioning.outputs.PreReleaseLabelWithDash }}') `
            ? @('-p') `
            : @()

          gh release create `
            '${{ steps.versioning.outputs.MajorMinorPatch }}${{ steps.versioning.outputs.PreReleaseLabelWithDash }}' `
            @files `
            @prerelease